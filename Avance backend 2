import random
import time

def crear_matriz(filas, columnas):
    numeros = [0, 1, 2, 3, 4, 55, 111]
    matriz = [[0 for _ in range(columnas)] for _ in range(filas)]
    matriz[0][0] = 0

    for num in [2, 3, 4]:
        fila = random.randint(0, filas - 1)
        columna = random.randint(0, columnas - 1)
        while matriz[fila][columna] != 0: 
            fila = random.randint(0, filas - 1)
            columna = random.randint(0, columnas - 1)
        matriz[fila][columna] = num

    for i in range(filas):
        for j in range(columnas):
            if matriz[i][j] == 0 and (i, j) != (0, 0):  
                matriz[i][j] = random.choice([num for num in numeros if num not in [2, 3, 4]])

    return matriz

def buscar_salida(matriz, fila_inicio, fila_fin, columna_inicio, columna_fin, visitado):
    if fila_inicio > fila_fin or columna_inicio > columna_fin:
        return []

    for i in range(fila_inicio, fila_fin + 1):
        for j in range(columna_inicio, columna_fin + 1):
            if matriz[i][j] == 2:
                return [(i, j)]

    fila_medio = (fila_inicio + fila_fin) // 2
    columna_medio = (columna_inicio + columna_fin) // 2

    cuadrantes = [
        (fila_inicio, fila_medio, columna_inicio, columna_medio),
        (fila_inicio, fila_medio, columna_medio + 1, columna_fin),
        (fila_medio + 1, fila_fin, columna_inicio, columna_medio),
        (fila_medio + 1, fila_fin, columna_medio + 1, columna_fin)
    ]

    for cuadrante in cuadrantes:
        ruta = buscar_salida(matriz, *cuadrante, visitado)
        if ruta:
            # Si hay una ruta en el cuadrante actual agregamos la coordenada actual al principio de la ruta y la devolvemos
            return [(fila_inicio, columna_inicio)] + ruta

    return []


def trivia():
    preguntas = [
        ("¿Qué es un algoritmo?\na) Un conjunto ordenado de operaciones sistemáticas que permite hacer un cálculo y hallar la solución a un problema\nb) Un tipo de software\nc) Una función específica de hardware", "a"),
        ("¿Cuál de los siguientes NO es un tipo de algoritmo de búsqueda?\na) Búsqueda lineal\nb) Búsqueda binaria\nc) Algoritmo de Dijkstra", "c"),
        ("¿En qué consiste el algoritmo de ordenamiento Bubble Sort?\na) Dividir el conjunto de elementos en partes cada vez más pequeñas\nb) Seleccionar el elemento más pequeño y colocarlo al inicio\nc) Intercambiar repetidamente elementos adyacentes si están en el orden incorrecto", "c"),
        ("¿Cuál es la complejidad de tiempo en el peor caso del algoritmo de búsqueda binaria?\na) O(n)\nb) O(log n)\nc) O(n^2)", "b"),
        ("¿Qué afirmación describe mejor el algoritmo de QuickSort?\na) Ordena los elementos eligiendo un 'pivote' y dividiendo el conjunto en dos, ordenando luego esas dos partes de forma independiente\nb) Intercambia elementos adyacentes si están en desorden, repitiendo el proceso hasta que no se necesiten más intercambios\nc) Construye un árbol binario de búsqueda y luego realiza un recorrido en orden para obtener los elementos ordenados", "a"),
        ("¿Qué es la recursividad en la programación?\na) Un bucle que se repite un número fijo de veces\nb) Un enfoque que divide un problema en subproblemas más pequeños, resolviendo cada uno de ellos de manera recursiva\nc) Una técnica para ordenar elementos en una lista", "b"),
        ("¿Qué es la complejidad de tiempo en el peor caso del algoritmo de búsqueda lineal?\na) O(n)\nb) O(log n)\nc) O(n log n)", "a"),
        ("¿Cuál de las siguientes opciones describe mejor el concepto de 'dividir para conquistar' en algoritmos?\na) Un enfoque que utiliza bucles para repetir una tarea hasta que se cumpla una condición de salida\nb) Un enfoque que divide un problema en subproblemas más pequeños, resolviendo cada uno de manera independiente y luego combinando las soluciones\nc) Un enfoque que utiliza técnicas de selección para elegir la mejor opción en cada paso", "b"),
        ("¿Cuál es el objetivo principal del algoritmo de ordenamiento QuickSort?\na) Ordenar los elementos eligiendo un 'pivote' y dividiendo el conjunto en dos, ordenando luego esas dos partes de forma independiente\nb) Intercambiar elementos adyacentes si están en desorden, repitiendo el proceso hasta que no se necesiten más intercambios\nc) Construir un árbol binario de búsqueda y luego realizar un recorrido en orden para obtener los elementos ordenados", "a"),
        ("¿Cuál fue una de las contribuciones más destacadas de Alan Turing al campo de la computación durante la Segunda Guerra Mundial?\na) Formuló el concepto de la máquina de Turing, un modelo teórico de computación\nb) Descifró los códigos de la máquina Enigma utilizados por las fuerzas alemanas\nc) Creó el primer lenguaje de programación de alto nivel", "b")
    ]
    
    pregunta, respuesta_correcta = random.choice(preguntas)
    while True:
        print(pregunta)
        respuesta_usuario = input("Ingrese la letra de la respuesta correcta: ").strip().lower()
        if respuesta_usuario == respuesta_correcta:
            print("¡Respuesta correcta!\n")
            break
        else:
            print("Respuesta incorrecta. Inténtalo de nuevo.\n")

def ruta_salida(matriz):
    filas = len(matriz)
    columnas = len(matriz[0])
    visitado = [[False for _ in range(columnas)] for _ in range(filas)]
    ruta = []

    def buscar_salida(fila, columna):
        if fila < 0 or fila >= filas or columna < 0 or columna >= columnas:
            return False
        if visitado[fila][columna] or matriz[fila][columna] == 1:
            return False
        visitado[fila][columna] = True
        ruta.append((fila, columna))
        if matriz[fila][columna] == 2:
            return True
        if (buscar_salida(fila + 1, columna) or
            buscar_salida(fila - 1, columna) or
            buscar_salida(fila, columna + 1) or
            buscar_salida(fila, columna - 1)):
            return True
        ruta.pop()
        return False

    if buscar_salida(0, 0):
        contador_preguntas = 0
        for fila, columna in ruta:
            if matriz[fila][columna] == 111:
                trivia()
                contador_preguntas += 1
            print(f"({fila}, {columna})")
            time.sleep(0.5)  
        print("¡Has llegado a la salida!")
    else:
        print("No se encontró una ruta hacia la salida.")

# Ejemplo 
matriz = crear_matriz(8, 8)

for fila in matriz:
    fila_str = ""
    for celda in fila:
        fila_str += "{:5}".format(celda)
    print(fila_str)

ruta_salida(matriz)
